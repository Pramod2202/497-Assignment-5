def shortestPathLength(graph):
    n = len(graph)
    
    dp = [[float('inf')] * n for _ in range(1 << n)]

    for i in range(n):
        dp[1 << i][i] = 0

    for mask in range(1 << n):
        for u in range(n):
            if (mask & (1 << u)) != 0:
                for v in graph[u]:
                    if (mask & (1 << v)) == 0:
                        new_mask = mask | (1 << v)
                        dp[new_mask][v] = min(dp[new_mask][v], dp[mask][u] + 1)

    final_mask = (1 << n) - 1
    return min(dp[final_mask][i] for i in range(n))

# Example 1:
graph1 = [[1,2,3],[0],[0],[0]]
print(shortestPathLength(graph1)) 

# Example 2:
graph2 = [[1],[0,2,4],[1,3,4],[2],[1,2]]
print(shortestPathLength(graph2)) 